function predictedPhases = classify_phases(inputFilePath)
    % Load the dataset
    data = readtable(inputFilePath, 'VariableNamingRule', 'preserve');

    % Verify the dataset, preliminary debug check
    disp('Dataset loaded successfully.');
    disp('Dataset preview:');
    disp(head(data));

    % Define the regions of interest
    aortaROI = 'aorta';
    portalVeinROI = 'portal_vein_and_splenic_vein';

    % Extract median intensities for the entire dataset
    aortaMedians = data{strcmp(data.Label, aortaROI), 'original_firstorder_Median'};
    portalVeinMedians = data{strcmp(data.Label, portalVeinROI), 'original_firstorder_Median'};

    % Preconfigured median and IQR values
    arterialAortaMedian = 253;
    arterialAortaIQR = 116;
    arterialPortalVeinMedian = 80;
    arterialPortalVeinIQR = 38.25;

    portalVenousAortaMedian = 124;
    portalVenousAortaIQR = 41;
    portalVenousPortalVeinMedian = 144;
    portalVenousPortalVeinIQR = 40;

    % Preconfigured cutoff values
    aortaCutoff = arterialAortaMedian - 1.45 * arterialAortaIQR;
    portalVeinCutoff = arterialPortalVeinMedian + 0.45 * arterialPortalVeinIQR;

    % Display the cutoffs
    disp('Cutoff values:');
    disp(['Aorta Cutoff: ', num2str(aortaCutoff)]);
    disp(['Portal Vein Cutoff: ', num2str(portalVeinCutoff)]);

    % Combine all data for classification
    data.PredictedPhase = repmat("", height(data), 1);

    % Extract unique patient IDs
    patientIDs = unique(data.PatientID);
    disp('Unique Patient IDs:');
    disp(patientIDs);

    % Load the pre-trained k-NN model
    load('medianknnmodel.mat', 'medianknnmodel');

    for i = 1:length(patientIDs)
        patientID = patientIDs(i);
        disp(['Processing Patient ID: ', num2str(patientID)]); % Debugging statement

        % Get aorta and portal vein data for the current patient
        aortaData = data(data.PatientID == patientID & strcmp(data.Label, aortaROI), :);
        portalVeinData = data(data.PatientID == patientID & strcmp(data.Label, portalVeinROI), :);

        if ~isempty(aortaData) && ~isempty(portalVeinData)
            aortaMedian = aortaData.original_firstorder_Median;
            portalVeinMedian = portalVeinData.original_firstorder_Median;

            % Specific If-Then Statement for Classification using preconfigured IQRs
            if aortaMedian > (portalVenousAortaMedian + 3.3 * portalVenousAortaIQR)
                predictedPhase = 'Arterial';
            elseif portalVeinMedian > (arterialPortalVeinMedian + 3.3 * arterialPortalVeinIQR)
                predictedPhase = 'Portal_Venous';
            elseif aortaMedian < (arterialAortaMedian - 3.3 * arterialAortaIQR)
                predictedPhase = 'Portal_Venous';
            elseif portalVeinMedian < (portalVenousPortalVeinMedian - 3.3 * portalVenousPortalVeinIQR)
                predictedPhase = 'Arterial';
            else
                % Cutoff-based classification logic
                if aortaMedian > aortaCutoff && portalVeinMedian < portalVeinCutoff
                    predictedPhase = 'Arterial';
                elseif aortaMedian < aortaCutoff && portalVeinMedian > portalVeinCutoff
                    predictedPhase = 'Portal_Venous';
                else
                    % Use k-NN to classify the phase
                    featureVector = [aortaMedian, portalVeinMedian];
                    predictedPhase = predict(medianknnmodel, featureVector);
                end
            end

            % Assign the predicted phase to the relevant rows
            data.PredictedPhase(data.PatientID == patientID & (strcmp(data.Label, aortaROI) | strcmp(data.Label, portalVeinROI))) = {char(predictedPhase)};
        end
    end

    % Output the predicted phases for each unique patient
    predictedPhases = unique(data(:, {'PatientID', 'PredictedPhase'}));
    disp('Predicted phases for each patient:');
    disp(predictedPhases);
end
