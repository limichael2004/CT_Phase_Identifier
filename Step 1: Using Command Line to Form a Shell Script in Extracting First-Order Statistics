#Much of the navigation of this code with command line was written in the context of a Virtual Machine (Ubuntu), adjust accordingly to your device


#Lets assume that you have all of your files in one directory, for example /MDAnderon/KoayLab/Michael Li/CTPhaseProject/Data and in this CTPhase data, I have two folders (you might only need one) that are called "Arterial"
#and "Portal Venous" and within each of these two, you have a lot of folders named w*******
#Each folder representing a patient (i.e w*******) and each w******* folder containing a raw nifti file and a mask nifti file (from Total Segmentator)

#Part 1: Using Linux Command Line to extract First-Order Statistics
	#Navigate to the terminal (Click Windows Button and Type in Terminal)
	#We need a shell script to run this, in layman's A shell script is like a list of commands written in a file. When you run the script, it follows the list and does each command one by one, like a recipe
	#To name shell script that uses pyradionomics to extract the first-order statistics that we we run in the code, we need to use a .sh, to do this, type in nano example.sh (where example is the name you want)
	#Paste the following

#Start of Script (don't include this line, it just demarcates the start)
#!/bin/bash

# Define the main directories
main_directories=("Arterial" "Portal_Venous")

# Define the base path
base_path="/Radonc/Cancer Physics and Engineering Lab/Michael Li/CTPhase Project/Data"

# Define ROI labels and their names as associative arrays
declare -A roi_labels
roi_labels=(
    [52]="aorta"
    [64]="portal_vein_and_splenic_vein"
)

# Define the output CSV file
master_output_csv="master_check_updated_pyradiomics_master_output.csv"
="splee
# Function to extract headers and append features to the master CSV
append_features_to_csv() {
    local patient_folder="$1"
    local main_dir="$2"
    local roi_name="$3"
    local temp_output_csv="$4"
    
    # Extract the headers if the master CSV is empty
    if [ ! -s "$master_output_csv" ]; then
        echo "Patient,Folder,Label,$(head -n 1 $temp_output_csv)" > $master_output_csv
    fi

    # Extract the data and append to the master CSV
    tail -n +2 $temp_output_csv | while IFS=, read -r line; do
        echo "$patient_folder,$main_dir,$roi_name,$line" >> $master_output_csv
    done
}

# Loop through main directories
for main_dir in "${main_directories[@]}"; do
    echo "Processing main directory: $main_dir"
    
    # Loop through each patient folder in the main directory
    for patient_folder in "$base_path/$main_dir"/w*; do
        echo "Processing patient folder: $patient_folder"

        if [ "$main_dir" == "Arterial" ]; then
            raw_file="$patient_folder/Art.raw.nii.gz"
            ml_file="$patient_folder/Art.ml.nii.gz"
        elif [ "$main_dir" == "Portal_Venous" ]; then
            raw_file="$patient_folder/Ven.raw.nii.gz"
            ml_file="$patient_folder/Ven.ml.nii.gz"
        fi

        # Check if the files exist
        if [ ! -f "$raw_file" ]; then
	 echo "Raw file $raw_file not found"
            continue
        fi

        if [ ! -f "$ml_file" ]; then
            echo "Mask file $ml_file not found"
            continue
        fi

        # Run PyRadiomics for each label and append the output to the master CSV file
        for label in "${!roi_labels[@]}"; do
            roi_name=${roi_labels[$label]}
            echo "Running PyRadiomics for ${roi_name} (label $label) in patient folder $patient_folder"

            # Temporary output file for PyRadiomics
            temp_output_csv="pyradiomics_output_${roi_name}.csv"
            log_file="pyradiomics_log_${roi_name}.txt"

            # Run PyRadiomics and save output to temporary CSV file
            pyradiomics "$raw_file" "$ml_file" --param final.yaml --setting "label:$label" --format csv --out $temp_output_csv --verbosity 3 > $log_file 2>&1

            # Check if the output file is created
            if [ ! -f "$temp_output_csv" ]; then
                echo "Error: PyRadiomics did not produce an output file for ${roi_name} (label $label) in patient folder $patient_folder"
                cat $log_file
                continue
            fi

            # Append the results to the master CSV file
            append_features_to_csv "$patient_folder" "$main_dir" "$roi_name" "$temp_output_csv"

            # Clean up temporary files
            rm -f $temp_output_csv $log_file
        done
    done
done



#End of Script (don't include this line, just demarcating the end)

#Next to save this, press Ctrl O, click enter to confirm, and then press Ctrl X and enter to exit back to the command line
